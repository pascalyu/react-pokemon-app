{"version":3,"sources":["models/mock-pokemon.ts","services/pokemon-services.ts","helpers/format-date.ts","helpers/format-type.ts","components/pokemon-card.tsx","components/pokemon-search.tsx","pages/pokemon-list.tsx","components/loader.tsx","pages/pokemon-detail.tsx","pages/page-not-found.tsx","components/pokemon-form.tsx","pages/pokemon-edit.tsx","models/pokemon.ts","pages/pokemon-create.tsx","services/authentication-services.ts","privateRoute.tsx","pages/login.tsx","app.tsx","index.tsx"],"names":["POKEMONS","id","name","hp","cp","picture","types","created","Date","PokemonService","this","isDev","fetch","then","response","json","catch","error","handleError","Promise","resolve","pokemons","data","isEmpty","find","pokemon","method","body","JSON","stringify","headers","index","findIndex","filter","push","term","includes","Object","keys","length","console","process","formatDate","date","getDate","getMonth","getFullYear","formatType","type","color","PokemonCard","borderColor","useState","setColor","history","useHistory","className","onClick","onMouseEnter","onMouseLeave","style","src","alt","map","key","PokemonSearch","setTerm","setPokemons","placeholder","value","onChange","e","target","searchPokemon","handleInputChange","to","PokemonList","useEffect","getPokemons","Loader","PokemonsDetail","match","setPokemon","getPokemon","params","width","margin","PageNotFound","PokemonForm","isEdit","isValid","form","setForm","hasTypes","fieldName","fieldValue","newField","createPokemon","updatePokemon","validateForm","newForm","test","isTypesValid","onSubmit","preventDefault","handleSubmit","deletePokemon","htmlFor","marginBottom","disabled","checked","concat","currentType","selectType","PokemonEdit","Pokemon","PokemonCreate","getTime","AuthenticationServices","username","password","isAuthenticated","setTimeout","PrivateRoute","Component","component","rest","render","props","AuthenticationService","pathname","Login","message","setMessage","login","App","exact","path","ReactDom","document","getElementById"],"mappings":"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","file":"static/js/main.63ef78f6.chunk.js","sourcesContent":["import Pokemon from './pokemon';\r\n   \r\nexport const POKEMONS: Pokemon[] = [\r\n {\r\n  id: 1,\r\n  name: \"Bulbizarre\",\r\n  hp: 25,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/001.png\",\r\n  types: [\"Plante\", \"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 2,\r\n  name: \"Salamèche\",\r\n  hp: 28,\r\n  cp: 6,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/004.png\",\r\n  types: [\"Feu\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 3,\r\n  name: \"Carapuce\",\r\n  hp: 21,\r\n  cp: 4,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/007.png\",\r\n  types: [\"Eau\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 4,\r\n  name: \"Aspicot\",\r\n  hp: 16,\r\n  cp: 2,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/013.png\",\r\n  types: [\"Insecte\", \"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 5,\r\n  name: \"Roucool\",\r\n  hp: 30,\r\n  cp: 7,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/016.png\",\r\n  types: [\"Normal\", \"Vol\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 6,\r\n  name: \"Rattata\",\r\n  hp: 18,\r\n  cp: 6,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/019.png\",\r\n  types: [\"Normal\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 7,\r\n  name: \"Piafabec\",\r\n  hp: 14,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/021.png\",\r\n  types: [\"Normal\", \"Vol\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 8,\r\n  name: \"Abo\",\r\n  hp: 16,\r\n  cp: 4,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/023.png\",\r\n  types: [\"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 9,\r\n  name: \"Pikachu\",\r\n  hp: 21,\r\n  cp: 7,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/025.png\",\r\n  types: [\"Electrik\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 10,\r\n  name: \"Sabelette\",\r\n  hp: 19,\r\n  cp: 3,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/027.png\",\r\n  types: [\"Normal\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 11,\r\n  name: \"Mélofée\",\r\n  hp: 25,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/035.png\",\r\n  types: [\"Fée\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 12,\r\n  name: \"Groupix\",\r\n  hp: 17,\r\n  cp: 8,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png\",\r\n  types: [\"Feu\"],\r\n  created: new Date()\r\n }\r\n];\r\n  \r\nexport default POKEMONS;","import Pokemon from \"../models/pokemon\";\r\nimport POKEMONS from \"../models/mock-pokemon\";\r\n  \r\nexport default class PokemonService {\r\n  \r\n  static pokemons:Pokemon[] = POKEMONS;\r\n  \r\n  static isDev = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development');\r\n  \r\n  static getPokemons(): Promise<Pokemon[]> {\r\n    if(this.isDev) {\r\n      return fetch('http://localhost:3001/pokemons')\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {\r\n      resolve(this.pokemons);\r\n    });\r\n  }\r\n  \r\n  static getPokemon(id: number): Promise<Pokemon|null> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${id}`)\r\n      .then(response => response.json())\r\n      .then(data => this.isEmpty(data) ? null : data)\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      resolve(this.pokemons.find(pokemon => id === pokemon.id));\r\n    }); \r\n  }\r\n  \r\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {\r\n      const { id } = pokemon;\r\n      const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\r\n      this.pokemons[index] = pokemon;\r\n      resolve(pokemon);\r\n    }); \r\n  }\r\n  \r\n  static deletePokemon(pokemon: Pokemon): Promise<{}> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      const { id } = pokemon;\r\n      this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\r\n      resolve({});\r\n    }); \r\n  }\r\n  \r\n  static createPokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    pokemon.created = new Date(pokemon.created);\r\n  \r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      this.pokemons.push(pokemon);\r\n      resolve(pokemon);\r\n    }); \r\n  }\r\n  \r\n  static searchPokemon(term: string): Promise<Pokemon[]> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons?q=${term}`)\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      const results = this.pokemons.filter(pokemon => pokemon.name.includes(term));\r\n      resolve(results);\r\n    });\r\n  \r\n  }\r\n  \r\n  static isEmpty(data: Object): boolean {\r\n    return Object.keys(data).length === 0;\r\n  }\r\n  \r\n  static handleError(error: Error): void {\r\n    console.error(error);\r\n  }\r\n}","const formatDate = (date: Date= new Date()): string => {\r\n    return `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\r\n}\r\n\r\n\r\nexport default formatDate;","const formatType = (type: string): string => {\r\n    let color: string;\r\n\r\n    switch (type) {\r\n        case 'Feu':\r\n            color = 'red lighten-1';\r\n            break;\r\n        case 'Eau':\r\n            color = 'blue lighten-1';\r\n            break;\r\n        case 'Plante':\r\n            color = 'green lighten-1';\r\n            break;\r\n        case 'Insecte':\r\n            color = 'brown lighten-1';\r\n            break;\r\n        case 'Normal':\r\n            color = 'grey lighten-3';\r\n            break;\r\n        case 'Vol':\r\n            color = 'blue lighten-3';\r\n            break;\r\n        case 'Poison':\r\n            color = 'deep-purple accent-1';\r\n            break;\r\n        case 'Fée':\r\n            color = 'pink lighten-4';\r\n            break;\r\n        case 'Psy':\r\n            color = 'deep-purple darken-2';\r\n            break;\r\n        case 'Electrik':\r\n            color = 'lime accent-1';\r\n            break;\r\n        case 'Combat':\r\n            color = 'deep-orange';\r\n            break;\r\n        default:\r\n            color = 'grey';\r\n            break;\r\n    }\r\n\r\n    return `chip ${color}`;\r\n}\r\nexport default formatType;","import React, { FunctionComponent, useState } from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatDate from '../helpers/format-date';\r\nimport formatType from '../helpers/format-type';\r\nimport './pokemon-card.css';\r\nimport { useHistory } from 'react-router-dom';\r\ntype Props = {\r\n    pokemon: Pokemon\r\n    borderColor?: string\r\n};\r\n\r\nconst PokemonCard: FunctionComponent<Props> = ({ pokemon, borderColor = \"#009688\" }) => {\r\n\r\n    const [color, setColor] = useState<string>();\r\n    const history = useHistory();\r\n    const showBorder = () => {\r\n        setColor(borderColor);\r\n    }\r\n\r\n    const hideBorder = () => {\r\n\r\n        setColor('#f5f5f5');\r\n    }\r\n    const goToPokemon = (id: number) => {\r\n\r\n        history.push(`/pokemons/${id}`);\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"col s6 m4\" onClick={() => goToPokemon(pokemon.id)} onMouseEnter={showBorder} onMouseLeave={hideBorder}>\r\n            <div className=\"card horizontal\" style={{ borderColor: color }} >\r\n                <div className=\"card-image\">\r\n                    <img src={pokemon.picture} alt={pokemon.name} />\r\n                </div>\r\n                <div className=\"card-stacked\">\r\n                    <div className=\"card-content\">\r\n                        <p>{pokemon.name}</p>\r\n                        <p><small>{formatDate(pokemon.created)}</small></p>\r\n                        {pokemon.types.map(type => (\r\n                            <span key={type} className={formatType(type)}> {type}</span>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonCard;","import React, { FunctionComponent, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonService from '../services/pokemon-services';\r\n\r\nconst PokemonSearch: FunctionComponent = () => {\r\n\r\n    const [term, setTerm] = useState<string>('');\r\n    const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const term = e.target.value;\r\n        setTerm(term);\r\n\r\n        if (term.length <= 1) {\r\n            setPokemons([]);\r\n            return;\r\n        }\r\n\r\n        PokemonService.searchPokemon(term).then(pokemons => setPokemons(pokemons));\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col s12 m6 offset-m3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-content\">\r\n                        <div className=\"input-field\">\r\n                            <input type=\"text\" placeholder=\"Rechercher un pokémon\" value={term} onChange={e => handleInputChange(e)} />\r\n                        </div>\r\n                        <div className='collection'>\r\n                            {pokemons.map((pokemon) => (\r\n                                <Link key={pokemon.id} to={`/pokemons/${pokemon.id}`} className=\"collection-item\">\r\n                                    {pokemon.name}\r\n                                </Link>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonSearch;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonService from '../services/pokemon-services'\r\nimport PokemonCard from '../components/pokemon-card';\r\nimport { useHistory } from 'react-router-dom';\r\nimport PokemonSearch from '../components/pokemon-search';\r\n\r\nconst PokemonList: FunctionComponent = () => {\r\n    const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n    const history = useHistory();\r\n    const goToCreatePokemon = () => {\r\n        history.push(`/pokemons/create`);\r\n    }\r\n    useEffect(() => {\r\n        PokemonService.getPokemons().then(pokemons => setPokemons(pokemons));\r\n    }, []);\r\n    return (\r\n        <div>\r\n            <h1 className=\"center\">Pokédex</h1>\r\n            <div className=\"container center\">\r\n                <PokemonSearch></PokemonSearch>\r\n                <div className=\"center btn btn-success\" onClick={() => goToCreatePokemon()} >create pokemon<i className=\"material-icons\">add</i></div>\r\n                <div className=\"row\">\r\n                    {pokemons.map(pokemon => (\r\n                        <PokemonCard key={pokemon.id} pokemon={pokemon} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonList;","import React, { FunctionComponent } from 'react';\r\n  \r\nconst Loader: FunctionComponent = () => {\r\n   \r\n  return (\r\n    <div className=\"preloader-wrapper big active\"> \r\n      <div className=\"spinner-layer spinner-blue\"> \r\n        <div className=\"circle-clipper left\"> \r\n          <div className=\"circle\"></div> \r\n        </div>\r\n        <div className=\"gap-patch\"> \r\n          <div className=\"circle\"></div> \r\n        </div><div className=\"circle-clipper right\"> \r\n          <div className=\"circle\"></div> \r\n        </div>\r\n      </div> \r\n   </div> \r\n  );\r\n}\r\n   \r\nexport default Loader;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps, Link } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonService from '../services/pokemon-services'\r\nimport formatDate from '../helpers/format-date';\r\nimport formatType from '../helpers/format-type';\r\nimport Loader from '../components/loader';\r\n\r\ntype Params = { id: string };\r\n\r\nconst PokemonsDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\r\n\r\n  const [pokemon, setPokemon] = useState<Pokemon | null>(null);\r\n\r\n  useEffect(() => {\r\n\r\n    //le + avant le mach permet de convertir en integer\r\n    PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\r\n\r\n\r\n  }, [match.params.id]);\r\n\r\n  return (\r\n    <div>\r\n      {pokemon ? (\r\n        <div className=\"row\">\r\n          <div className=\"col s12 m8 offset-m2\">\r\n            <h2 className=\"header center\">{pokemon.name}</h2>\r\n            <div className=\"card hoverable\">\r\n              <div className=\"card-image\">\r\n                <img src={pokemon.picture} alt={pokemon.name} style={{ width: '250px', margin: '0 auto' }} />\r\n                <Link to={`/pokemons/edit/${pokemon.id}`} className=\"btn btn-floating halfway-fab waves-effect waves-light\">\r\n                  <i className=\"material-icons\">edit</i>\r\n                </Link>\r\n              </div>\r\n\r\n              <div className=\"card-stacked\">\r\n                <div className=\"card-content\">\r\n                  <table className=\"bordered striped\">\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>Nom</td>\r\n                        <td><strong>{pokemon.name}</strong></td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>Points de vie</td>\r\n                        <td><strong>{pokemon.hp}</strong></td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>Dégâts</td>\r\n                        <td><strong>{pokemon.cp}</strong></td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>Types</td>\r\n                        <td>\r\n                          {pokemon.types.map(type => (\r\n                            <span key={type} className={formatType(type)}>{type}</span>\r\n                          ))}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>Date de création</td>\r\n                        <td>{formatDate(pokemon.created)}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n                <div className=\"card-action\">\r\n                  <Link to=\"/\">Retour</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n          <h4 className=\"center\"> <Loader></Loader></h4>\r\n        )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PokemonsDetail;","import React, { FunctionComponent } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n  \r\nconst PageNotFound: FunctionComponent = () => {\r\n  \r\n  return (\r\n    <div className=\"center\">\r\n      <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvée\"/>\r\n      <h1>Hey, cette page n'existe pas !</h1> \r\n      <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\r\n        Retourner à l'accueil\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PageNotFound;","import React, { FunctionComponent, useState } from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatType from '../helpers/format-type';\r\nimport { useHistory } from 'react-router-dom';\r\nimport PokemonService from '../services/pokemon-services';\r\nimport { create } from 'domain';\r\n\r\n\r\ntype Props = {\r\n    pokemon: Pokemon,\r\n    isEdit: Boolean\r\n};\r\n\r\ntype Field = {\r\n    value?: any,\r\n    error?: string,\r\n    isValid?: boolean\r\n\r\n};\r\n\r\ntype Form = {\r\n    picture: Field,\r\n    name: Field,\r\n    hp: Field,\r\n    cp: Field,\r\n    types: Field\r\n\r\n};\r\nconst PokemonForm: FunctionComponent<Props> = ({ pokemon, isEdit = true }) => {\r\n\r\n    const [form, setForm] = useState<Form>({\r\n        picture: { value: pokemon.picture, isValid: true },\r\n        name: { value: pokemon.name, isValid: true },\r\n        hp: { value: pokemon.hp, isValid: true },\r\n        cp: { value: pokemon.cp, isValid: true },\r\n        types: { value: pokemon.types, isValid: true },\r\n    });\r\n    const history = useHistory();\r\n    const types: string[] = [\r\n        'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\r\n        'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\r\n    ];\r\n\r\n    const hasTypes = (type: string): boolean => {\r\n        return form.types.value.includes(type);\r\n    }\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const fieldName: string = e.target.name;\r\n        const fieldValue: string = e.target.value;\r\n        const newField: Field = { [fieldName]: { value: fieldValue } };\r\n\r\n        setForm({ ...form, ...newField });\r\n\r\n    }\r\n\r\n    const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const checked = e.target.checked;\r\n        let newField: Field;\r\n        if (checked) {\r\n            const newTypes: string[] = form.types.value.concat([type]);\r\n            newField = { value: newTypes };\r\n        } else {\r\n\r\n            const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\r\n            newField = { value: newTypes };\r\n        }\r\n\r\n        setForm({ ...form, ...{ types: newField } });\r\n\r\n    };\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (validateForm()) {\r\n            pokemon.picture = form.picture.value;\r\n            pokemon.name = form.name.value;\r\n            pokemon.hp = form.hp.value;\r\n            pokemon.cp = form.cp.value;\r\n            pokemon.types = form.types.value;\r\n            pokemon.name = form.name.value;\r\n\r\n            isEdit ? updatePokemon() : createPokemon();\r\n        }\r\n    }\r\n    const createPokemon = () => {\r\n        PokemonService.createPokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`))\r\n\r\n\r\n    }\r\n\r\n    const updatePokemon = () => {\r\n        PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`))\r\n\r\n\r\n    }\r\n\r\n    const deletePokemon = () => {\r\n        PokemonService.deletePokemon(pokemon).then(() => history.push('/pokemons'));\r\n\r\n    }\r\n\r\n    const validateForm = () => {\r\n        let newForm: Form = form;\r\n\r\n        if (!isEdit) {\r\n\r\n\r\n        }\r\n\r\n        // Validator name\r\n        if (!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\r\n            const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\r\n            const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\r\n            newForm = { ...newForm, ...{ name: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.name.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ name: newField } };\r\n        }\r\n\r\n        // Validator hp\r\n        if (!/^[0-9]{1,3}$/.test(form.hp.value)) {\r\n            const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\r\n            const newField: Field = { value: form.hp.value, error: errorMsg, isValid: false };\r\n            newForm = { ...newForm, ...{ hp: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.hp.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ hp: newField } };\r\n        }\r\n\r\n        // Validator cp\r\n        if (!/^[0-9]{1,2}$/.test(form.cp.value)) {\r\n            const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\r\n            const newField: Field = { value: form.cp.value, error: errorMsg, isValid: false };\r\n            newForm = { ...newForm, ...{ cp: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.cp.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ cp: newField } };\r\n        }\r\n\r\n        setForm(newForm);\r\n        return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\r\n    }\r\n\r\n    const isTypesValid = (type: string): boolean => {\r\n        // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\r\n        // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\r\n        if (form.types.value.length === 1 && hasTypes(type)) {\r\n            return false;\r\n        }\r\n\r\n        // Cas n°1: Le pokémon a au moins 3 types.\r\n        // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\r\n        if (form.types.value.length >= 3 && !hasTypes(type)) {\r\n            return false;\r\n        }\r\n\r\n        // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \r\n        // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\r\n        return true;\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={e => handleSubmit(e)}>\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m8 offset-m2\">\r\n                    <div className=\"card hoverable\">\r\n                        {isEdit &&\r\n                            <div className=\"card-image\">\r\n\r\n                                <img src={pokemon.picture} alt={pokemon.name} style={{ width: '250px', margin: '0 auto' }} />\r\n\r\n                                <span className=\"btn-floating halfway-fab waves-effect waves-light\">\r\n                                    <i onClick={deletePokemon} className=\"  \">delete</i>\r\n                                </span>\r\n                            </div>\r\n                        }\r\n                        <div className=\"card-stacked\">\r\n                            <div className=\"card-content\">\r\n\r\n\r\n                                {!isEdit &&\r\n\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"name\">Image</label>\r\n                                        <input id=\"picture\" name=\"picture\" type=\"text\" className=\"form-control\" value={form.picture.value} onChange={e => handleInputChange(e)}></input>\r\n                                        {form.name.error &&\r\n                                            <div className=\"card-panel red accent-l\">\r\n                                                {form.name.error}\r\n                                            </div>\r\n                                        }\r\n                                    </div>\r\n                                }\r\n                                {/* Pokemon name */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"name\">Nom</label>\r\n                                    <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {form.name.error &&\r\n                                        <div className=\"card-panel red accent-l\">\r\n                                            {form.name.error}\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                                {/* Pokemon hp */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"hp\">Point de vie</label>\r\n                                    <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {form.hp.error &&\r\n                                        <div className=\"card-panel red accent-l\">\r\n                                            {form.hp.error}\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                                {/* Pokemon cp */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"cp\">Dégâts</label>\r\n                                    <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {form.cp.error &&\r\n                                        <div className=\"card-panel red accent-l\">\r\n                                            {form.cp.error}\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                                {/* Pokemon types */}\r\n                                <div className=\"form-group\">\r\n                                    <label>Types</label>\r\n                                    {types.map(type => (\r\n                                        <div key={type} style={{ marginBottom: '10px' }}>\r\n                                            <label>\r\n                                                <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} disabled={!isTypesValid(type)} checked={hasTypes(type)} onChange={e => selectType(type, e)}></input>\r\n                                                <span>\r\n                                                    <p className={formatType(type)}>{type}</p>\r\n                                                </span>\r\n                                            </label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card-action center\">\r\n                                {/* Submit button */}\r\n                                <button type=\"submit\" className=\"btn\">Valider</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default PokemonForm;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport PokemonForm from '../components/pokemon-form';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonService from '../services/pokemon-services'\r\nimport Loader from '../components/loader';\r\n\r\ntype Params = { id: string };\r\n\r\nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\r\n\r\n    const [pokemon, setPokemon] = useState<Pokemon | null>(null);\r\n\r\n    useEffect(() => {\r\n        //le + avant le mach permet de convertir en integer\r\n        PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\r\n    }, [match.params.id]);\r\n\r\n    return (\r\n        <div>\r\n            {pokemon ? (\r\n                <div className=\"row\">\r\n                    <h2 className=\"header center\">Éditer {pokemon.name}</h2>\r\n                    <PokemonForm pokemon={pokemon} isEdit={true}></PokemonForm>\r\n                </div>\r\n            ) : (\r\n                    <h4 className=\"center\"> <Loader></Loader></h4>\r\n                )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonEdit;","export default class Pokemon {\r\n   \r\n    // 1. Typage des propiétés d'un pokémon.\r\n    id: number;\r\n    hp: number;\r\n    cp: number;\r\n    name: string;\r\n    picture: string;\r\n    types: Array<string>;\r\n    created: Date;\r\n     \r\n    // 2. Définition des valeurs par défaut des propriétés d'un pokémon.\r\n    constructor(\r\n     id: number,\r\n     hp: number = 100,\r\n     cp: number = 10,\r\n     name: string = '...',\r\n     picture: string = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/XXX.png',\r\n     types: Array<string> = ['Normal'],\r\n     created: Date = new Date()\r\n    ) {\r\n     // 3. Initialisation des propiétés d'un pokémons.\r\n     this.id = id;\r\n     this.hp = hp;\r\n     this.cp = cp;\r\n     this.name = name;\r\n     this.picture = picture;\r\n     this.types = types;\r\n     this.created = created;\r\n    }\r\n   }","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps, Link } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonForm from '../components/pokemon-form';\r\n\r\ntype Params = { id: string };\r\n\r\nconst PokemonCreate: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\r\n\r\n    const [pokemon] = useState<Pokemon>(new Pokemon(new Date().getTime()));\r\n    return (\r\n        <div>\r\n\r\n            <div className=\"row\">\r\n                <h2 className=\"header center\">Créer un nouveau pokémon</h2>\r\n                <PokemonForm pokemon={pokemon} isEdit={false}></PokemonForm>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default PokemonCreate;","export default class AuthenticationServices {\r\n\r\n    static isAuthenticated: boolean = false;\r\n\r\n    static login(username: string, password: string): Promise<boolean> {\r\n\r\n        const isAuthenticated = (username === \"pikachu\" && password === \"pikachu\");\r\n\r\n\r\n        return new Promise(resolve => {\r\n\r\n            setTimeout(() => {\r\n                this.isAuthenticated = isAuthenticated;\r\n                resolve(isAuthenticated);\r\n\r\n            }, 1000);\r\n        });\r\n    }\r\n\r\n\r\n\r\n}","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport AuthenticationService from './services/authentication-services';\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }: any) => (\r\n\r\n    \r\n    <Route {...rest} render={(props) => {\r\n        const isAuthenticated = AuthenticationService.isAuthenticated;\r\n        if (!isAuthenticated) {\r\n            return <Redirect to={{ pathname: '/login' }} />\r\n        }\r\n\r\n        return <Component {...props} />\r\n    }} />\r\n);\r\n\r\nexport default PrivateRoute;","import React, { FunctionComponent, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport AuthenticationService from '../services/authentication-services';\r\n\r\ntype Field = {\r\n    value?: any,\r\n    error?: string,\r\n    isValid?: boolean\r\n};\r\n\r\ntype Form = {\r\n    username: Field,\r\n    password: Field\r\n}\r\n\r\nconst Login: FunctionComponent = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    const [form, setForm] = useState<Form>({\r\n        username: { value: '' },\r\n        password: { value: '' },\r\n    });\r\n    const [message, setMessage] = useState<string>('Vous êtes déconnecté. (pikachu / pikachu)');\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const fieldName: string = e.target.name;\r\n        const fieldValue: string = e.target.value;\r\n        const newField: Field = { [fieldName]: { value: fieldValue } };\r\n\r\n        setForm({ ...form, ...newField });\r\n    }\r\n\r\n    const validateForm = () => {\r\n        let newForm: Form = form;\r\n\r\n        // Validator username\r\n        if (form.username.value.length < 3) {\r\n            const errorMsg: string = 'Votre prénom doit faire au moins 3 caractères de long.';\r\n            const newField: Field = { value: form.username.value, error: errorMsg, isValid: false };\r\n            newForm = { ...newForm, ...{ username: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.username.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ username: newField } };\r\n        }\r\n\r\n        // Validator password\r\n        if (form.password.value.length < 6) {\r\n            const errorMsg: string = 'Votre mot de passe doit faire au moins 6 caractères de long.';\r\n            const newField: Field = { value: form.password.value, error: errorMsg, isValid: false };\r\n            newForm = { ...newForm, ...{ password: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.password.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ password: newField } };\r\n        }\r\n\r\n        setForm(newForm);\r\n\r\n        return newForm.username.isValid && newForm.password.isValid;\r\n    }\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        const isFormValid = validateForm();\r\n        if (isFormValid) {\r\n            setMessage('👉 Tentative de connexion en cours ...');\r\n            AuthenticationService.login(form.username.value, form.password.value).then(isAuthenticated => {\r\n                if (!isAuthenticated) {\r\n                    setMessage('🔐 Identifiant ou mot de passe incorrect.');\r\n                    return;\r\n                }\r\n\r\n                history.push('/pokemons');\r\n\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <form onSubmit={(e) => handleSubmit(e)}>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m8 offset-m2\">\r\n                    <div className=\"card hoverable\">\r\n                        <div className=\"card-stacked\">\r\n                            <div className=\"card-content\">\r\n                                {/* Form message */}\r\n                                {message && <div className=\"form-group\">\r\n                                    <div className=\"card-panel grey lighten-5\">\r\n                                        {message}\r\n                                    </div>\r\n                                </div>}\r\n                                {/* Field username */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"username\">Identifiant</label>\r\n                                    <input id=\"username\" type=\"text\" name=\"username\" className=\"form-control\" value={form.username.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {/* error */}\r\n                                    {form.username.error &&\r\n                                        <div className=\"card-panel red accent-1\">\r\n                                            {form.username.error}\r\n                                        </div>}\r\n                                </div>\r\n                                {/* Field password */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\">Mot de passe</label>\r\n                                    <input id=\"password\" type=\"password\" name=\"password\" className=\"form-control\" value={form.password.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {/* error */}\r\n                                    {form.password.error &&\r\n                                        <div className=\"card-panel red accent-1\">\r\n                                            {form.password.error}\r\n                                        </div>}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card-action center\">\r\n                                {/* Submit button */}\r\n                                <button type=\"submit\" className=\"btn\">Valider</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Login;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport PokemonList from './pages/pokemon-list';\r\n\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport PokemonsDetail from './pages/pokemon-detail';\r\nimport PageNotFound from \"./pages/page-not-found\";\r\nimport PokemonEdit from './pages/pokemon-edit';\r\nimport PokemonCreate from './pages/pokemon-create';\r\nimport PrivateRoute from './privateRoute';\r\nimport Login from './pages/login';\r\n\r\n\r\n//FC = function component\r\nconst App: FunctionComponent = () => {\r\n    return (\r\n        <Router>\r\n            <div>\r\n\r\n                {/**la barre de nav */}\r\n\r\n                <nav>\r\n                    <div className=\"nav-wrapper teal\">\r\n                        <Link to=\"/\" className=\"brand-logo center\">Pokédex</Link>\r\n                    </div>\r\n\r\n                </nav>\r\n                {/** Le système de gestion des routes de notre application */}\r\n\r\n                <Switch>\r\n                    <PrivateRoute exact path=\"/\" component={PokemonList} />\r\n                    <PrivateRoute exact path=\"/pokemons\" component={PokemonList} />\r\n                    <Route exact path=\"/login\" component={Login} />\r\n                    <PrivateRoute exact path=\"/pokemons/create\" component={PokemonCreate} />\r\n                    <PrivateRoute exact path=\"/pokemons/edit/:id\" component={PokemonEdit} />\r\n                    <PrivateRoute path=\"/pokemons/:id\" component={PokemonsDetail} />\r\n                    <Route component={PageNotFound} />\r\n                </Switch>\r\n\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport App from './app';\r\n\r\n\r\nReactDom.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n\r\n);"],"sourceRoot":""}